#!/usr/bin/env ruby

require 'optparse'
#require "bundler/setup"
require 'maze'

algorithms = %w(
  binary_tree
  aldous_border
  aldous_border2
  sidewinder
)
options = {rows: 4, columns: 4, size: 1, algorithm: algorithms.first, visualize: false}
parser = OptionParser.new do |opts|
  opts.banner = "
Create a maze using the binary tree algorithm.

Usage #{File.basename $0} [options]

"
  opts.on('-g', '--grid [SIZE]', Integer, 'Rows and columns of the grid') do |g|
    options[:rows] = g
    options[:columns] = g
  end

  opts.on('-r', '--rows [ROWS]', Integer, 'Rows') do |r|
    options[:rows] = r
  end

  opts.on('-c', '--columns [COLUMNS]', Integer, 'Columns') do |c|
    options[:columns] = c
  end

  opts.on('-s', '--SIZE [SIZE]', Integer, 'The size of the cell') do |s|
    options[:size] = s
  end
  
  opts.on('-a', '--algorithm [ALGORITHM]', algorithms, 'Choose the algorithm to generate the maze.') do |a|
    options[:algorithm] = a
  end

  opts.on('-v', '--visualize', 'Visualize the progress of the algorithm') do
    options[:visualize] = true
  end

  opts.on('-S', '--seed SEED', Integer, 'Set random seed') do |seed|
    options[:seed] = seed
  end
end

parser.parse!(ARGV)
# p [:options, options]

srand(options[:seed]) if options[:seed]
grid = Maze::Grid.new options[:rows], options[:columns]
grid.cell_size = options[:size]

algorithm = Kernel.const_get("Maze::Algorithm::#{options[:algorithm].split('_').map(&:capitalize).join}").new
algorithm.on grid do |cell|
  next unless options[:visualize]
  puts grid.to_s(cell)
  sleep algorithm.speed
end
puts grid
puts algorithm.status