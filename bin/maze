#!/usr/bin/env ruby

require 'optparse'
require "bundler/setup"
require 'maze'

algorithms = {
  binary_tree: Maze::Algorithm::BinaryTree,
  aldous_border: Maze::Algorithm::AldousBorder,
  aldous_border2: Maze::Algorithm::AldousBorder2,
  sidewinder: Maze::Algorithm::Sidewinder,
  growing_tree: Maze::Algorithm::GrowingTree,
}

types = {
  ortho: Maze::Grid,
  sigma: Maze::HexGrid,
}

# default options
options = {
  type: types[:ortho], 
  rows: 4, 
  columns: 4, 
  size: 1, 
  algorithm: algorithms[:growing_tree],
  visualize: false,
}

parser = OptionParser.new do |opts|
  opts.banner = "
Maze generator

Usage: #{File.basename $0} [options]

"
  opts.on('-t', '--type [TYPE]', types.keys, 'The type of the maze.', "One of #{types.keys.join(', ')}") do |t|
    options[:type] = types[t]
  end

  opts.on('-g', '--grid [SIZE]', Integer, 'Rows and columns of the grid') do |g|
    options[:rows] = g
    options[:columns] = g
  end

  opts.on('-r', '--rows [ROWS]', Integer, 'Rows') do |r|
    options[:rows] = r
  end

  opts.on('-c', '--columns [COLUMNS]', Integer, 'Columns') do |c|
    options[:columns] = c
  end

  opts.on('-s', '--SIZE [SIZE]', Integer, 'The size of the cell') do |s|
    options[:size] = s
  end
  
  opts.on('-a', '--algorithm [ALGORITHM]', algorithms.keys, 'The algorithm to generate the maze.', "One of #{algorithms.keys.join(', ')}") do |a|
    options[:algorithm] = a
  end

  opts.on('-v', '--visualize', 'Visualize the progress of the algorithm') do
    options[:visualize] = true
  end

  opts.on('-S', '--seed SEED', Integer, 'Set random seed') do |seed|
    options[:seed] = seed
  end
  
  opts.separator ""
end

parser.parse!(ARGV)

srand(options[:seed]) if options[:seed]

# Initialize the grid
grid = options[:type].new options[:rows], options[:columns]
grid.cell_size = options[:size]

# Run the algorithm
algorithm = options[:algorithm].new
algorithm.on grid do |cell|
  next unless options[:visualize]
  puts grid.to_s(cell)
  sleep algorithm.speed
end
puts grid
puts algorithm.status