#!/usr/bin/env ruby

require 'optparse'
require "bundler/setup"
require 'maze'

algorithms = {
  bt:  { class: Maze::Algorithm::BinaryTree,    configurations: [] },
  ab:  { class: Maze::Algorithm::AldousBorder,  configurations: [] },
  ab2: { class: Maze::Algorithm::AldousBorder2, configurations: [] },
  sw:  { class: Maze::Algorithm::Sidewinder,    configurations: [] },
  gt:  { class: Maze::Algorithm::GrowingTree,   configurations: [
    Proc.new {|active| active.last },
    Proc.new {|active| active.sample },
    Proc.new {|active| (rand(2) == 0) ? active.last : active.sample },
  ] },
}

types = {
  ortho: Maze::Grid,
  sigma: Maze::SigmaGrid,
  delta: Maze::DeltaGrid,
}

# default options
options = {
  type: types[:ortho], 
  grid_size: [4, 4],
  cell_size: 1, 
  algorithm: algorithms[:gt],
  algorithm_configuration: 0,
  visualize: false,
}

parser = OptionParser.new do |opts|
  opts.banner = "
Maze generator

Usage: #{File.basename $0} [options]

"
  opts.separator "\nGrid options:\n\n"

  opts.on('-t', '--type TYPE', types.keys, 'The type of the maze.', "One of #{types.keys.join(', ')}") do |type|
    options[:type] = types[type]
  end
  opts.on('-g', '--grid-size ROWS,COLUMNS', Array, 'The number of rows and columns of the grid') do |v|
    options[:grid_size] = v.first(2).map(&:to_i)
  end
  opts.on('-c', '--cell-size SIZE', Integer, 'The size of the cell') do |cell_size|
    options[:cell_size] = cell_size
  end
  
  opts.separator "\nAlgorithm options:\n\n"

  opts.on('-a', '--algorithm ALGORITHM', algorithms.keys, 'The algorithm to generate the maze.', "One of #{algorithms.keys.join(', ')}") do |algorithm|
    options[:algorithm] = algorithms[algorithm]
  end
  opts.on('--conf NUMBER', Integer, 'Choose a configuration for an algorithm', 'Configurations exists for:', %Q%#{algorithms.map{|k,v| "#{k}: #{v[:configurations].size}" unless v[:configurations].empty?}.compact.join(', ')}%) do |conf|
    options[:algorithm_configuration] = conf-1
  end
  opts.on('-S', '--seed SEED', Integer, 'Set random seed') do |seed|
    options[:seed] = seed
  end
  
  opts.separator "\nMisc:\n\n"

  opts.on('-v', '--visualize', 'Visualize the progress of the algorithm') do
    options[:visualize] = true
  end

  opts.separator ""
end

parser.parse!(ARGV)

srand(options[:seed]) if options[:seed]

# Initialize the grid
grid = options[:type].new *options[:grid_size]
grid.cell_size = options[:cell_size]

# Instanziate and optionally configure the algorithm
algorithm = options[:algorithm][:class].new
unless options[:algorithm][:configurations].empty?
  algorithm.configure options[:algorithm][:configurations][options[:algorithm_configuration]]
end

# Run the algorithm on the grid
algorithm.on grid do |cell|
  next unless options[:visualize]
  puts grid.to_s(cell)
  sleep algorithm.speed
end

puts grid
puts algorithm.status