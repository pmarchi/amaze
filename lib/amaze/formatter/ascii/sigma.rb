
class Amaze::Formatter::ASCII::Sigma < Amaze::Formatter::ASCII

  def draw_cell cell
    x0, y0 = coord cell
    x1 = x0 + cell_size
    x2 = x0 + cell_size + cell_size * 3
    y1 = y0 + cell_size

    0.upto(cell_size*3-1) do |i|
      # north
      char[y0][x1+i] = n.color(grid_color) unless cell.linked_to?(:north)
      # south
      char[y0+cell_size*2][x1+i] = s.color(grid_color) unless cell.linked_to?(:south)
    end

    0.upto(cell_size-1) do |i|
      # north east
      char[y0+1+i][x2+i] = ne.color(grid_color) unless cell.linked_to?(:northeast)
      # north west
      char[y0+1+i][x0+cell_size-1-i] = nw.color(grid_color) unless cell.linked_to?(:northwest)
      # south east
      char[y1+1+i][x2+cell_size-1-i] = se.color(grid_color) unless cell.linked_to?(:southeast)
      # south west
      char[y1+1+i][x0+i] = sw.color(grid_color) unless cell.linked_to?(:southwest)
    end
  end
  
  def draw_content cell
    x, y = coord cell
    distance(cell).center(cell_size * 3).chars.each_with_index do |c,i|
      char[y+cell_size][x+cell_size+i] = c.color(*distance_color(cell))
    end
  end

  alias_method :draw_distances, :draw_content

  def draw_path cell
    x, y = coord cell, :center
    # north-south
    1.upto(cell_size*2) do |i|
      char[y+i][x] = p.color(path_color)
    end if path?(:south, cell)
    # northwest-southeast
    0.upto(cell_size-1) do |i|
      char[y+i][x+i*4] = p.color(path_color)
      char[y+i+1][x+i*4+2] = pnwse.color(path_color)
    end if path?(:southeast, cell)
    # southwest-northeast
    0.upto(cell_size-1) do |i|
      char[y-i][x+i*4] = p.color(path_color)
      char[y-i][x+i*4+2] = pswne.color(path_color)
    end if path?(:northeast, cell)
    # center
    char[y][x] = p.color(path_color)
  end
  
  def coord cell, ref=:topleft
    x = xpos(cell.column)
    y = ypos(cell.row, cell.column.odd?)
    if ref == :center
      x = x + cell_size * 3 / 2 + cell_size
      y = y + cell_size
    end
    [x, y]
  end
  
  def xpos column
    (cell_size * 4) * column
  end
  
  def ypos row, odd=false
    offset = odd ? cell_size : 0
    (cell_size * 2) * row + offset
  end
  
  def char_array_width
    xpos(grid.columns) + cell_size
  end
  
  def char_array_height
    ypos(grid.rows, true) + 1
  end

  def n
    '_'
  end
  
  def ne
    '\\'
  end
  
  def se
    '/'
  end
  
  def p
    '.'
  end
  
  def pnwse
    '`'
  end
  
  def pswne
    '´'
  end
  
  alias_method :s, :n
  alias_method :sw, :ne
  alias_method :nw, :se
end

__END__

.___.....___.....___.....
/...\___/...\___/...\___.
\___/...\___/...\___/...\
/...\___/...\___/...\___/
\___/...\___/...\___/...\
/...\___/...\___/...\___/
\___/...\___/...\___/....
....\___/...\___/........


..______..........______..........______..........
./......\......../......\......../......\.........
/........\______/........\______/........\______..
\......../......\......../......\......../......\.
.\______/........\______/........\______/........\
./......\......../......\......../......\......../
/........\______/........\______/........\______/.
\......../......\......../......\......../......\.
.\______/........\______/........\______/........\
./......\......../......\......../......\......../
/........\______/........\______/........\______/.
\......../......\......../......\......../......\.
.\______/........\______/........\______/........\
........\......../......\......../......\......../
.........\______/........\______/........\______/.


..._________..............._________..............._________
../.........\............./.........\............./.........\
./...........\.........../...........\.........../...........\
/.............\_________/.............\_________/.............\_________
\............./.........\............./.........\............./.........\
.\.........../...........\.........../...........\.........../...........\
..\_________/.............\_________/.............\_________/.............\
../.........\............./.........\............./.........\............./
./...........\.........../...........\.........../...........\.........../
/.............\_________/.............\_________/.............\_________/
\............./.........\............./.........\............./.........\
.\.........../...........\.........../...........\.........../...........\
..\_________/.............\_________/.............\_________/.............\
../.........\............./.........\............./.........\............./
./...........\.........../...........\.........../...........\.........../
/.............\_________/.............\_________/.............\_________/
\............./.........\............./.........\............./.........\
.\.........../...........\.........../...........\.........../...........\
..\_________/.............\_________/.............\_________/.............\
............\............./.........\............./.........\............./
.............\.........../...........\.........../...........\.........../
..............\_________/.............\_________/.............\_________/


 ___     ___     ___     
/ . \___/   \___/   \___ 
\ . ` . \___/ . \___/   \
/ . \___` . ´___/   \___/
\___/   \___/   \___/   \
/   \___/   \___/   \___/
\___/   \___/   \___/    
    \___/   \___/        


  ______          ______          ______          
 /      \        /      \        /      \         
/    .   \______/        \______/        \______  
\    . ` .      \        /      \        /      \ 
 \   .     ` .   \______/    .   \______/        \
 /   .  \      ` .       . ´     /      \        /
/    .   \______   ` . ´  ______/        \______/ 
\    .   /      \        /      \        /      \ 
 \___.__/        \______/        \______/        \
 /      \        /      \        /      \        /
/        \______/        \______/        \______/ 
\        /      \        /      \        /      \ 
 \______/        \______/        \______/        \
        \        /      \        /      \        /
         \______/        \______/        \______/ 


   _________               _________               _________
  /         \             /         \             /         \
 /           \           /           \           /           \
/      .      \_________/             \_________/             \_________
\      . ` .            \             /         \             /         \
 \     .     ` .         \           /           \           /           \
  \    .         ` .      \_________/             \_________/             \
  /    .    \        ` .               .          /         \             /
 /     .     \           ` .       . ´           /           \           /
/      .      \_________     ` . ´     _________/             \_________/
\             /         \             /         \             /         \
 \           /           \           /           \           /           \
  \_________/             \_________/             \_________/             \
  /         \             /         \             /         \             /
 /           \           /           \           /           \           /
/             \_________/             \_________/             \_________/
\             /         \             /         \             /         \
 \           /           \           /           \           /           \
  \_________/             \_________/             \_________/             \
            \             /         \             /         \             /
             \           /           \           /           \           /
              \_________/             \_________/             \_________/
